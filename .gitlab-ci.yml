# Copied in from Moubootaur Legends's Hercules .gitlab-ci.yml
stages:
  - build
  - test
  - publish

variables: &base_vars
  DEBIAN_COMMON_PACKAGES: make git gcc g++
  GIT_DEPTH: 0 # avoid shallow clone since version is based on latest tag
  GIT_SUBMODULE_STRATEGY: normal

.prerequisites: &prerequisites
  before_script:
    - uname -a
    - apt-get update
    - apt-get install -y -qq $INSTALL_PACKAGES $DEBIAN_COMMON_PACKAGES

# Active server OS?
re:ubuntu1804-attoconf:build:
  <<: *prerequisites
  stage: build
  image: ubuntu:18.04
  variables:
    <<: *base_vars
    INSTALL_PACKAGES: python3
  script:
    - echo "Building TMW Athena $CI_BUILD_NAME"
    - git fetch -t
    - printf "Building TMW Athena version %s\n" "$(git  describe --tags HEAD)"
    - mkdir build-atto
    - cd build-atto
    - ../configure --user
    - make
    - whoami
    - make install
  artifacts: # required for test stage
    untracked: true
    expire_in: 30 mins

# Next server OS?
re:ubuntu2204-attoconf:build:
  <<: *prerequisites
  stage: build
  image: ubuntu:22.04
  variables:
    <<: *base_vars
    INSTALL_PACKAGES: python3
  script:
    - git fetch -t
    - printf "Building TMW Athena version %s\n" "$(git  describe --tags HEAD)"
    - mkdir build-atto
    - cd build-atto
    - ../configure --user
    - make
    - whoami
    - make install
  artifacts: # required for test stage
    untracked: true
    expire_in: 30 mins

# Next server OS, with cmake
re:ubuntu2204:build:
  <<: *prerequisites
  stage: build
  image: ubuntu:22.04
  variables:
    <<: *base_vars
    INSTALL_PACKAGES: python3 cmake
  script:
    - git fetch -t
    - printf "Building TMW Athena version %s\n" "$(git  describe --tags HEAD)"
    - mkdir build-cmake
    - cd build-cmake
    - cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local ..
    - make
    - whoami
    - make install
  artifacts: # required for test stage
    untracked: true
    expire_in: 30 mins


# Disabled. fails with:
# (1) GDB failing to resolve a type
# (2) /usr/bin/ld: Dwarf Error: Can't find .debug_ranges section.
.re:ubuntu1804-attoconf:test:
  <<: *prerequisites
  stage: test
  image: ubuntu:18.04
  needs: ["ubuntu1804-attoconf:build"]
  variables:
    <<: *base_vars
    INSTALL_PACKAGES: python3 gdb
  script:
    - printf "Testing TMW Athena version %s\n" "$(git  describe --tags HEAD)"
    - cd build-atto
    - make test


# Enabled tests
re:ubuntu2204-attoconf:test:
  <<: *prerequisites
  stage: test
  image: ubuntu:22.04
  needs: ["re:ubuntu2204-attoconf:build"]
  variables:
    <<: *base_vars
    INSTALL_PACKAGES: python3 gdb
  script:
    - printf "Testing TMW Athena version %s\n" "$(git  describe --tags HEAD)"
    - cd build-atto
    - make test

# Disabled. Tests are not supported yet by the CMake project.
.re:ubuntu2204:test:
  <<: *prerequisites
  stage: test
  image: ubuntu:22.04
  needs: ["re:ubuntu2204:build"]
  variables:
    <<: *base_vars
    INSTALL_PACKAGES: python3 gdb
  script:
    - printf "Testing TMW Athena version %s\n" "$(git  describe --tags HEAD)"
    - cd build-cmake
    - make test

# Build Docker image for testing
docker:build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - /kaniko/executor --no-push --context "$CI_PROJECT_DIR" --dockerfile "$CI_PROJECT_DIR/Dockerfile" --tarPath tmwa-server.tar
  artifacts:
    name: "tmwa-server-$CI_COMMIT_SHORT_SHA"
    expire_in: 1 week
    paths:
      - tmwa-server.tar

# Push Docker image to registry
docker:push:
  stage: publish
  needs: ["docker:build"]
  image:
    name: quay.io/skopeo/stable
    entrypoint: [""]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$DOCKER_HUB_TOKEN && $DOCKER_HUB_USERNAME && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: never
  script:
    - export DOCKER_HUB_IMAGE="${DOCKER_HUB_IMAGE:-docker.io/${DOCKER_HUB_USERNAME}/${CI_PROJECT_NAME}}"
    - export IMAGE_TAG="${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}"
    - skopeo copy --insecure-policy --dest-creds "${DOCKER_HUB_USERNAME}:${DOCKER_HUB_TOKEN}" docker-archive:tmwa-server.tar "docker://${DOCKER_HUB_IMAGE}:${IMAGE_TAG}"
    - if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ] && [ -z "$CI_COMMIT_TAG" ]; then skopeo copy --insecure-policy --dest-creds "${DOCKER_HUB_USERNAME}:${DOCKER_HUB_TOKEN}" docker-archive:tmwa-server.tar "docker://${DOCKER_HUB_IMAGE}:latest"; fi
